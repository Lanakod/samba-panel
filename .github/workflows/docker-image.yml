name: Docker Image CI

on:
  push:
    branches: [ master ]
    tags: [ v* ]

env:
  GHCR_REPO: ghcr.io/lanakod/samba-panel
  DOCKERHUB_REPO: lanakod/samba-panel

jobs:
  notify-start:
    runs-on: ubuntu-latest
    steps:
      - name: Notify Telegram (Start)
        run: |
          TIMESTAMP=$(TZ='Europe/Moscow' date +"%Y-%m-%d %H:%M:%S %Z")
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üöÄ CI started for *${{ github.repository }}* at commit [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) on \`${TIMESTAMP}\`" \
            -d parse_mode=Markdown

  test:
    runs-on: ubuntu-latest
    needs: notify-start
    steps:
      - uses: actions/checkout@v3

      - name: Run Tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose -f docker-compose.test.yml build
            docker-compose -f docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

      - name: Notify Telegram (Test Success)
        run: |
          TIMESTAMP=$(TZ='Europe/Moscow' date +"%Y-%m-%d %H:%M:%S %Z")
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚úÖ Tests passed for *${{ github.repository }}* at commit [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) on \`${TIMESTAMP}\`" \
            -d parse_mode=Markdown

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        arch: [ amd64, arm64 ]
        include:
          - arch: amd64
            platform: linux/amd64
            suffix: ""
            label: "AMD64"
          - arch: arm64
            platform: linux/arm64
            suffix: "-arm"
            label: "ARM64"
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub (only if secrets exist)
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REPO }}
            ${{ env.GHCR_REPO }}
          tags: |
            type=raw,value=latest${{ matrix.suffix }}
            type=semver,pattern={{version}}${{ matrix.suffix }}
            type=sha,prefix=sha-,format=short
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=Samba Panel image for ${{ matrix.label }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            buildx-${{ matrix.arch }}-
            buildx-

      - name: Build and push image (${{ matrix.label }})
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Notify Telegram (Pushed ${{ matrix.label }})
        run: |
          TIMESTAMP=$(TZ='Europe/Moscow' date +"%Y-%m-%d %H:%M:%S %Z")
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üì¶ *${{ matrix.label }} Docker image pushed* as \`${{ env.DOCKERHUB_REPO }}:latest${{ matrix.suffix }}\`
            üîó Commit: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) on \`${TIMESTAMP}\`" \
            -d parse_mode=Markdown

  notify-failure:
    if: failure()
    runs-on: ubuntu-latest
    needs: [ test, docker-build ]
    steps:
      - name: Notify Telegram - Build Failed
        run: |
          TIMESTAMP=$(TZ='Europe/Moscow' date +"%Y-%m-%d %H:%M:%S %Z")
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚ùå *Build failed* for [${{ github.repository }}@${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) on \`${{ github.ref_name }}\` at \`${TIMESTAMP}\`" \
            -d parse_mode=Markdown
